#if __cpp_lib_format
#  include <format>
    // using namespace std;
    using std::format;
    using std::formatter;
#else
#  include <fmt/format.h>
    // using namespace fmt;
    using fmt::format;
    using fmt::formatter;
#endif

#include <iostream>

// A wrapper for type T
template <class T> struct Box
{
    T value;
};

// The wrapper Box<T> can be formatted using the format specification of the wrapped value
template <class T, class CharT> struct formatter<Box<T>, CharT> : formatter<T, CharT>
{
    // parse() is inherited from the base class

    // Define format() by calling the base class implementation with the wrapped value
    template <class FormatContext> auto format(Box<T> t, FormatContext& fc)
    {
        return formatter<T, CharT>::format(t.value, fc);
    }
};

int main([[maybe_unused]] int argc, [[maybe_unused]] char *argv[])
{
    Box<int> v{42};
    std::cout << format("{:#x}", v) << std::endl;
}
